# import libraries and iris data set
import numpy as np
import pandas as pd
from sklearn.datasets import load_iris
iris = load_iris()
df = pd.DataFrame(iris.data, columns=iris.feature_names)
df.head()

from sklearn.preprocessing import StandardScaler

class IrisDataProcessor:
  def __init__(self):
    iris = load_iris()
    self.df = pd.DataFrame(iris.data, columns=iris.feature_names)
    self.X = iris.data
    self.y = iris.target
  def prepare_data(self):
    scaler = StandardScaler()
    self.X = scaler.fit_transform(self.X)
    
  def get_feature_stats(self):
    return self.df.describe()

iris_data = IrisDataProcessor()
iris_data.prepare_data()

from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score
from sklearn.model_selection import cross_val_score, KFold

class IrisExperiment:
  def __init__(self, data_processor, model):
    self.data_processor = data_processor
    self.data_processor.prepare_data()
    self.X_train, self.X_test, self.y_train, self.y_test = train_test_split(self.data_processor.X, self.data_processor.y, test_size=0.2, random_state=42)
    self.model = model
    self.y_pred = None
  def run_experiment(self):
    self.model.fit(self.X_train, self.y_train)
    self.y_pred = self.model.predict(self.X_test)
    
  def log_results(self):
    cv = KFold(n_splits=5, shuffle=True, random_state=42)
    scores = cross_val_score(self.model, self.X_train, self.y_train, cv=cv, scoring='accuracy')
    print(f'Cross-validation scores: {scores}')
    print(f'Mean cross-validation score: {np.mean(scores)}')

X=df
y=iris.target
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)


import mlflow    

mlflow.set_experiment("MLflow_exp")

mlflow.set_tracking_uri("http://localhost:5000")

# Function to log model and metrics with MLflow
def log_model_with_mlflow(model, model_name):
    with mlflow.start_run():
        # Train the model
        model.fit(X_train, y_train)

        # Predict on test data
        y_pred = model.predict(X_test)

        # Calculate metrics
        accuracy = accuracy_score(y_test, y_pred)
	precision = precision_score(y_test, y_pred)
	recall = recall_score(y_test, y_pred)	

        # Log metrics        
	mlflow.log_metric("mse", mse)
        mlflow.log_metric("r2", r2)

        # Log the model
        mlflow.sklearn.log_model(model, model_name)
        
        print(f"{model_name} logged with MSE: {mse} and R2: {r2}")
        
    mlflow.end_run()

lr=LinearRegression()
log_model_with_mlflow(lr, "Linear Regression")

rf = RandomForestRegressor(n_estimators=100, random_state=42)
log_model_with_mlflow(rf, "Random Forest")

